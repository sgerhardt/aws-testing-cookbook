// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ec2

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/ec2"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDescribeInstancesAPI creates a new instance of MockDescribeInstancesAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDescribeInstancesAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDescribeInstancesAPI {
	mock := &MockDescribeInstancesAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDescribeInstancesAPI is an autogenerated mock type for the DescribeInstancesAPI type
type MockDescribeInstancesAPI struct {
	mock.Mock
}

type MockDescribeInstancesAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDescribeInstancesAPI) EXPECT() *MockDescribeInstancesAPI_Expecter {
	return &MockDescribeInstancesAPI_Expecter{mock: &_m.Mock}
}

// DescribeInstances provides a mock function for the type MockDescribeInstancesAPI
func (_mock *MockDescribeInstancesAPI) DescribeInstances(ctx context.Context, params *ec2.DescribeInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstancesOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DescribeInstances")
	}

	var r0 *ec2.DescribeInstancesOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstancesInput, ...func(*ec2.Options)) (*ec2.DescribeInstancesOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstancesInput, ...func(*ec2.Options)) *ec2.DescribeInstancesOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInstancesOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ec2.DescribeInstancesInput, ...func(*ec2.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDescribeInstancesAPI_DescribeInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeInstances'
type MockDescribeInstancesAPI_DescribeInstances_Call struct {
	*mock.Call
}

// DescribeInstances is a helper method to define mock.On call
//   - ctx
//   - params
//   - optFns
func (_e *MockDescribeInstancesAPI_Expecter) DescribeInstances(ctx interface{}, params interface{}, optFns ...interface{}) *MockDescribeInstancesAPI_DescribeInstances_Call {
	return &MockDescribeInstancesAPI_DescribeInstances_Call{Call: _e.mock.On("DescribeInstances",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockDescribeInstancesAPI_DescribeInstances_Call) Run(run func(ctx context.Context, params *ec2.DescribeInstancesInput, optFns ...func(*ec2.Options))) *MockDescribeInstancesAPI_DescribeInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]func(*ec2.Options))
		run(args[0].(context.Context), args[1].(*ec2.DescribeInstancesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDescribeInstancesAPI_DescribeInstances_Call) Return(describeInstancesOutput *ec2.DescribeInstancesOutput, err error) *MockDescribeInstancesAPI_DescribeInstances_Call {
	_c.Call.Return(describeInstancesOutput, err)
	return _c
}

func (_c *MockDescribeInstancesAPI_DescribeInstances_Call) RunAndReturn(run func(ctx context.Context, params *ec2.DescribeInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstancesOutput, error)) *MockDescribeInstancesAPI_DescribeInstances_Call {
	_c.Call.Return(run)
	return _c
}
